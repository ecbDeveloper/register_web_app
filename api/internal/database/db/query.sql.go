// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	validation "github.com/go-ozzo/ozzo-validation"
	"github.com/go-ozzo/ozzo-validation/is"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, name, email, password
) VALUES (
    gen_random_uuid(), $1, $2, $3
) 
    RETURNING id
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (u CreateUserParams) Validate() error {
	return validation.ValidateStruct(&u,
		validation.Field(&u.Email, validation.Required, is.Email),
		validation.Field(&u.Password, validation.Required),
	)
}


func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email 
FROM users
`

type GetAllUsersRow struct {
	ID    uuid.UUID
	Name  string
	Email string
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :one
SELECT id, name, email 
FROM users WHERE id = $1
`

type SelectUserRow struct {
	ID    uuid.UUID
	Name  string
	Email string
}

func (q *Queries) SelectUser(ctx context.Context, id uuid.UUID) (SelectUserRow, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i SelectUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const selectUserLoginCredentials = `-- name: SelectUserLoginCredentials :one
SELECT id, email, password 
FROM users WHERE email = $1
`

type SelectUserLoginCredentialsRow struct {
	ID       uuid.UUID
	Email    string
	Password string
}

func (q *Queries) SelectUserLoginCredentials(ctx context.Context, email string) (SelectUserLoginCredentialsRow, error) {
	row := q.db.QueryRow(ctx, selectUserLoginCredentials, email)
	var i SelectUserLoginCredentialsRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $1, 
    email = $2,
    password = $3,
    updated_at = $4 
WHERE id = $5
RETURNING id, name, email, password, created_at, updated_at
`

type UpdateUserParams struct {
	Name      string
	Email     string
	Password  string
	UpdatedAt pgtype.Timestamp
	ID        uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
