// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"regexp"

	validation "github.com/go-ozzo/ozzo-validation"
	"github.com/go-ozzo/ozzo-validation/is"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id, name, email, cpf, phone_number, age, password
) VALUES (
    gen_random_uuid(), $1, $2, $3, $4, $5, $6
)
`

type CreateUserParams struct {
	Name        string
	Email       string
	Cpf         string
	PhoneNumber string
	Age         int32
	Password    string
}

func (u CreateUserParams) Validate() error {
	return validation.ValidateStruct(&u,
		validation.Field(&u.Email, validation.Required, is.Email),
		validation.Field(&u.Password, validation.Required),
		validation.Field(&u.Age, validation.Required, validation.Min(6), validation.Max(150)),
		validation.Field(&u.Cpf, validation.Match(regexp.MustCompile(`^\d{3}\.\d{3}\.\d{3}-\d{2}$`))),
		validation.Field(&u.PhoneNumber, validation.Match(regexp.MustCompile(`^\(\d{2}\)\s9\d{4}-\d{4}$`)) ),
	)
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Cpf,
		arg.PhoneNumber,
		arg.Age,
		arg.Password,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, age, phone_number, cpf
FROM users
`

type GetAllUsersRow struct {
	ID          uuid.UUID
	Name        string
	Email       string
	Age         int32
	PhoneNumber string
	Cpf         string
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Age,
			&i.PhoneNumber,
			&i.Cpf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :one
SELECT id, name, email, age, phone_number, cpf
FROM users WHERE id = $1
`

type SelectUserRow struct {
	ID          uuid.UUID
	Name        string
	Email       string
	Age         int32
	PhoneNumber string
	Cpf         string
}

func (q *Queries) SelectUser(ctx context.Context, id uuid.UUID) (SelectUserRow, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i SelectUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
		&i.PhoneNumber,
		&i.Cpf,
	)
	return i, err
}

const selectUserLoginCredentials = `-- name: SelectUserLoginCredentials :one
SELECT id, email, password 
FROM users WHERE email = $1
`

type SelectUserLoginCredentialsRow struct {
	ID       uuid.UUID
	Email    string
	Password string
}

func (q *Queries) SelectUserLoginCredentials(ctx context.Context, email string) (SelectUserLoginCredentialsRow, error) {
	row := q.db.QueryRow(ctx, selectUserLoginCredentials, email)
	var i SelectUserLoginCredentialsRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $1, 
    email = $2,
	cpf = $3,
	age = $4,
	phone_number = $5,
    updated_at = $6
WHERE id = $7
RETURNING id, name, email, password, created_at, updated_at, cpf, phone_number, age, role
`

type UpdateUserParams struct {
	Name        string
	Email       string
	Cpf         string
	Age         int32
	PhoneNumber string
	UpdatedAt   pgtype.Timestamp
	ID          uuid.UUID
}

func (u UpdateUserParams) Validate() error {
	return validation.ValidateStruct(&u,
		validation.Field(&u.Email, validation.Required, is.Email),
		validation.Field(&u.Age, validation.Required, validation.Min(6), validation.Max(150)),
		validation.Field(&u.Cpf, validation.Match(regexp.MustCompile(`^\d{3}\.\d{3}\.\d{3}-\d{2}$`))),
		validation.Field(&u.PhoneNumber, validation.Match(regexp.MustCompile(`^\(\d{2}\)\s9\d{4}-\d{4}$`)) ),
	)
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Cpf,
		arg.Age,
		arg.PhoneNumber,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Cpf,
		&i.PhoneNumber,
		&i.Age,
		&i.Role,
	)
	return i, err
}
